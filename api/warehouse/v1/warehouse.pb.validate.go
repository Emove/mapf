// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: warehouse/v1/warehouse.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "mapf/api/common/data/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.EnableStatus(0)
)

// Validate checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseRequestMultiError, or nil if none found.
func (m *CreateWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
		err := CreateWarehouseRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetNodeTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateWarehouseRequestValidationError{
						field:  fmt.Sprintf("NodeTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateWarehouseRequestValidationError{
						field:  fmt.Sprintf("NodeTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateWarehouseRequestValidationError{
					field:  fmt.Sprintf("NodeTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateWarehouseRequestMultiError(errors)
	}

	return nil
}

// CreateWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseRequestMultiError) AllErrors() []error { return m }

// CreateWarehouseRequestValidationError is the validation error returned by
// CreateWarehouseRequest.Validate if the designated constraints aren't met.
type CreateWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseRequestValidationError) ErrorName() string {
	return "CreateWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseRequestValidationError{}

// Validate checks the field values on CreateWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseResponseMultiError, or nil if none found.
func (m *CreateWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWarehouse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarehouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWarehouseResponseValidationError{
				field:  "Warehouse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNodeTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateWarehouseResponseValidationError{
						field:  fmt.Sprintf("NodeTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateWarehouseResponseValidationError{
						field:  fmt.Sprintf("NodeTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateWarehouseResponseValidationError{
					field:  fmt.Sprintf("NodeTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateWarehouseResponseMultiError(errors)
	}

	return nil
}

// CreateWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseResponseMultiError) AllErrors() []error { return m }

// CreateWarehouseResponseValidationError is the validation error returned by
// CreateWarehouseResponse.Validate if the designated constraints aren't met.
type CreateWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseResponseValidationError) ErrorName() string {
	return "CreateWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseResponseValidationError{}

// Validate checks the field values on CreateNodeTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodeTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodeTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodeTypeRequestMultiError, or nil if none found.
func (m *CreateNodeTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodeTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 64 {
		err := CreateNodeTypeRequestValidationError{
			field:  "Code",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
		err := CreateNodeTypeRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateNodeTypeRequestMultiError(errors)
	}

	return nil
}

// CreateNodeTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNodeTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNodeTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodeTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodeTypeRequestMultiError) AllErrors() []error { return m }

// CreateNodeTypeRequestValidationError is the validation error returned by
// CreateNodeTypeRequest.Validate if the designated constraints aren't met.
type CreateNodeTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeTypeRequestValidationError) ErrorName() string {
	return "CreateNodeTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeTypeRequestValidationError{}

// Validate checks the field values on Warehouse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Warehouse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Warehouse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WarehouseMultiError, or nil
// if none found.
func (m *Warehouse) ValidateAll() error {
	return m.validate(true)
}

func (m *Warehouse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	if len(errors) > 0 {
		return WarehouseMultiError(errors)
	}

	return nil
}

// WarehouseMultiError is an error wrapping multiple validation errors returned
// by Warehouse.ValidateAll() if the designated constraints aren't met.
type WarehouseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WarehouseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WarehouseMultiError) AllErrors() []error { return m }

// WarehouseValidationError is the validation error returned by
// Warehouse.Validate if the designated constraints aren't met.
type WarehouseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarehouseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarehouseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarehouseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarehouseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarehouseValidationError) ErrorName() string { return "WarehouseValidationError" }

// Error satisfies the builtin error interface
func (e WarehouseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarehouse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarehouseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarehouseValidationError{}

// Validate checks the field values on NodeType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeTypeMultiError, or nil
// if none found.
func (m *NodeType) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WarehouseId

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return NodeTypeMultiError(errors)
	}

	return nil
}

// NodeTypeMultiError is an error wrapping multiple validation errors returned
// by NodeType.ValidateAll() if the designated constraints aren't met.
type NodeTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeTypeMultiError) AllErrors() []error { return m }

// NodeTypeValidationError is the validation error returned by
// NodeType.Validate if the designated constraints aren't met.
type NodeTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeTypeValidationError) ErrorName() string { return "NodeTypeValidationError" }

// Error satisfies the builtin error interface
func (e NodeTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeTypeValidationError{}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: warehouse/v1/warehouse.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "mapf/api/common/data/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.DefaultStatus(0)
)

// Validate checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseRequestMultiError, or nil if none found.
func (m *CreateWarehouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
		err := CreateWarehouseRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWarehouseRequestMultiError(errors)
	}

	return nil
}

// CreateWarehouseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseRequestMultiError) AllErrors() []error { return m }

// CreateWarehouseRequestValidationError is the validation error returned by
// CreateWarehouseRequest.Validate if the designated constraints aren't met.
type CreateWarehouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseRequestValidationError) ErrorName() string {
	return "CreateWarehouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseRequestValidationError{}

// Validate checks the field values on CreateWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWarehouseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWarehouseResponseMultiError, or nil if none found.
func (m *CreateWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWarehouse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWarehouseResponseValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarehouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWarehouseResponseValidationError{
				field:  "Warehouse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWarehouseResponseMultiError(errors)
	}

	return nil
}

// CreateWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWarehouseResponseMultiError) AllErrors() []error { return m }

// CreateWarehouseResponseValidationError is the validation error returned by
// CreateWarehouseResponse.Validate if the designated constraints aren't met.
type CreateWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWarehouseResponseValidationError) ErrorName() string {
	return "CreateWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWarehouseResponseValidationError{}

// Validate checks the field values on GetWarehouseByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWarehouseByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWarehouseByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWarehouseByNameRequestMultiError, or nil if none found.
func (m *GetWarehouseByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWarehouseByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
		err := GetWarehouseByNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWarehouseByNameRequestMultiError(errors)
	}

	return nil
}

// GetWarehouseByNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetWarehouseByNameRequest.ValidateAll() if the
// designated constraints aren't met.
type GetWarehouseByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWarehouseByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWarehouseByNameRequestMultiError) AllErrors() []error { return m }

// GetWarehouseByNameRequestValidationError is the validation error returned by
// GetWarehouseByNameRequest.Validate if the designated constraints aren't met.
type GetWarehouseByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarehouseByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarehouseByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarehouseByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarehouseByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarehouseByNameRequestValidationError) ErrorName() string {
	return "GetWarehouseByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWarehouseByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarehouseByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarehouseByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarehouseByNameRequestValidationError{}

// Validate checks the field values on GetWarehouseByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWarehouseByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWarehouseByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWarehouseByIdRequestMultiError, or nil if none found.
func (m *GetWarehouseByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWarehouseByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetWarehouseByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWarehouseByIdRequestMultiError(errors)
	}

	return nil
}

// GetWarehouseByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetWarehouseByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWarehouseByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWarehouseByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWarehouseByIdRequestMultiError) AllErrors() []error { return m }

// GetWarehouseByIdRequestValidationError is the validation error returned by
// GetWarehouseByIdRequest.Validate if the designated constraints aren't met.
type GetWarehouseByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarehouseByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarehouseByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarehouseByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarehouseByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarehouseByIdRequestValidationError) ErrorName() string {
	return "GetWarehouseByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWarehouseByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarehouseByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarehouseByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarehouseByIdRequestValidationError{}

// Validate checks the field values on GetWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWarehouseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWarehouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWarehouseResponseMultiError, or nil if none found.
func (m *GetWarehouseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWarehouseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWarehouse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWarehouseResponseValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWarehouseResponseValidationError{
					field:  "Warehouse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWarehouse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWarehouseResponseValidationError{
				field:  "Warehouse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWarehouseResponseMultiError(errors)
	}

	return nil
}

// GetWarehouseResponseMultiError is an error wrapping multiple validation
// errors returned by GetWarehouseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWarehouseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWarehouseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWarehouseResponseMultiError) AllErrors() []error { return m }

// GetWarehouseResponseValidationError is the validation error returned by
// GetWarehouseResponse.Validate if the designated constraints aren't met.
type GetWarehouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarehouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarehouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarehouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarehouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarehouseResponseValidationError) ErrorName() string {
	return "GetWarehouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWarehouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarehouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarehouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarehouseResponseValidationError{}

// Validate checks the field values on UpdateWarehouseByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWarehouseByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWarehouseByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWarehouseByIdRequestMultiError, or nil if none found.
func (m *UpdateWarehouseByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWarehouseByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateWarehouseByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetName() != "" {

		if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
			err := UpdateWarehouseByIdRequestValidationError{
				field:  "Name",
				reason: "value length must be between 3 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if val := m.GetIsDefault(); val < 0 || val > 2 {
		err := UpdateWarehouseByIdRequestValidationError{
			field:  "IsDefault",
			reason: "value must be inside range [0, 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWarehouseByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateWarehouseByIdRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWarehouseByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateWarehouseByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWarehouseByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWarehouseByIdRequestMultiError) AllErrors() []error { return m }

// UpdateWarehouseByIdRequestValidationError is the validation error returned
// by UpdateWarehouseByIdRequest.Validate if the designated constraints aren't met.
type UpdateWarehouseByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWarehouseByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWarehouseByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWarehouseByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWarehouseByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWarehouseByIdRequestValidationError) ErrorName() string {
	return "UpdateWarehouseByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWarehouseByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWarehouseByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWarehouseByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWarehouseByIdRequestValidationError{}

// Validate checks the field values on UpdateWarehouseStatusByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateWarehouseStatusByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWarehouseStatusByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWarehouseStatusByIdRequestMultiError, or nil if none found.
func (m *UpdateWarehouseStatusByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWarehouseStatusByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateWarehouseStatusByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStatus(); val < 0 || val > 2 {
		err := UpdateWarehouseStatusByIdRequestValidationError{
			field:  "Status",
			reason: "value must be inside range [0, 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWarehouseStatusByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateWarehouseStatusByIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateWarehouseStatusByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWarehouseStatusByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWarehouseStatusByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWarehouseStatusByIdRequestMultiError) AllErrors() []error { return m }

// UpdateWarehouseStatusByIdRequestValidationError is the validation error
// returned by UpdateWarehouseStatusByIdRequest.Validate if the designated
// constraints aren't met.
type UpdateWarehouseStatusByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWarehouseStatusByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWarehouseStatusByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWarehouseStatusByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWarehouseStatusByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWarehouseStatusByIdRequestValidationError) ErrorName() string {
	return "UpdateWarehouseStatusByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWarehouseStatusByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWarehouseStatusByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWarehouseStatusByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWarehouseStatusByIdRequestValidationError{}

// Validate checks the field values on DeleteWarehouseByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWarehouseByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWarehouseByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWarehouseByIdRequestMultiError, or nil if none found.
func (m *DeleteWarehouseByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWarehouseByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteWarehouseByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWarehouseByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteWarehouseByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWarehouseByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteWarehouseByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWarehouseByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWarehouseByIdRequestMultiError) AllErrors() []error { return m }

// DeleteWarehouseByIdRequestValidationError is the validation error returned
// by DeleteWarehouseByIdRequest.Validate if the designated constraints aren't met.
type DeleteWarehouseByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWarehouseByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWarehouseByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWarehouseByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWarehouseByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWarehouseByIdRequestValidationError) ErrorName() string {
	return "DeleteWarehouseByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWarehouseByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWarehouseByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWarehouseByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWarehouseByIdRequestValidationError{}

// Validate checks the field values on CreateNodeTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodeTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodeTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodeTypeRequestMultiError, or nil if none found.
func (m *CreateNodeTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodeTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 64 {
		err := CreateNodeTypeRequestValidationError{
			field:  "Code",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
		err := CreateNodeTypeRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateNodeTypeRequestMultiError(errors)
	}

	return nil
}

// CreateNodeTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNodeTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNodeTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodeTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodeTypeRequestMultiError) AllErrors() []error { return m }

// CreateNodeTypeRequestValidationError is the validation error returned by
// CreateNodeTypeRequest.Validate if the designated constraints aren't met.
type CreateNodeTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeTypeRequestValidationError) ErrorName() string {
	return "CreateNodeTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeTypeRequestValidationError{}

// Validate checks the field values on CreateNodeTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodeTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodeTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodeTypeResponseMultiError, or nil if none found.
func (m *CreateNodeTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodeTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNodeType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNodeTypeResponseValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNodeTypeResponseValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTypeResponseValidationError{
				field:  "NodeType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNodeTypeResponseMultiError(errors)
	}

	return nil
}

// CreateNodeTypeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNodeTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNodeTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodeTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodeTypeResponseMultiError) AllErrors() []error { return m }

// CreateNodeTypeResponseValidationError is the validation error returned by
// CreateNodeTypeResponse.Validate if the designated constraints aren't met.
type CreateNodeTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeTypeResponseValidationError) ErrorName() string {
	return "CreateNodeTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeTypeResponseValidationError{}

// Validate checks the field values on GetNodeTypeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeTypeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeTypeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeTypeByIdRequestMultiError, or nil if none found.
func (m *GetNodeTypeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeTypeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetNodeTypeByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNodeTypeByIdRequestMultiError(errors)
	}

	return nil
}

// GetNodeTypeByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetNodeTypeByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNodeTypeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeTypeByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeTypeByIdRequestMultiError) AllErrors() []error { return m }

// GetNodeTypeByIdRequestValidationError is the validation error returned by
// GetNodeTypeByIdRequest.Validate if the designated constraints aren't met.
type GetNodeTypeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeTypeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeTypeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeTypeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeTypeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeTypeByIdRequestValidationError) ErrorName() string {
	return "GetNodeTypeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeTypeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeTypeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeTypeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeTypeByIdRequestValidationError{}

// Validate checks the field values on GetNodeTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeTypeResponseMultiError, or nil if none found.
func (m *GetNodeTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNodeType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeTypeResponseValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeTypeResponseValidationError{
					field:  "NodeType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeTypeResponseValidationError{
				field:  "NodeType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNodeTypeResponseMultiError(errors)
	}

	return nil
}

// GetNodeTypeResponseMultiError is an error wrapping multiple validation
// errors returned by GetNodeTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNodeTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeTypeResponseMultiError) AllErrors() []error { return m }

// GetNodeTypeResponseValidationError is the validation error returned by
// GetNodeTypeResponse.Validate if the designated constraints aren't met.
type GetNodeTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeTypeResponseValidationError) ErrorName() string {
	return "GetNodeTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeTypeResponseValidationError{}

// Validate checks the field values on UpdateNodeTypeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodeTypeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodeTypeByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodeTypeByIdRequestMultiError, or nil if none found.
func (m *UpdateNodeTypeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodeTypeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateNodeTypeByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Code != nil {

		if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 64 {
			err := UpdateNodeTypeByIdRequestValidationError{
				field:  "Code",
				reason: "value length must be between 3 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
			err := UpdateNodeTypeByIdRequestValidationError{
				field:  "Name",
				reason: "value length must be between 3 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.IsDefault != nil {

		if val := m.GetIsDefault(); val < 0 || val > 2 {
			err := UpdateNodeTypeByIdRequestValidationError{
				field:  "IsDefault",
				reason: "value must be inside range [0, 2]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateNodeTypeByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateNodeTypeByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNodeTypeByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateNodeTypeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodeTypeByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodeTypeByIdRequestMultiError) AllErrors() []error { return m }

// UpdateNodeTypeByIdRequestValidationError is the validation error returned by
// UpdateNodeTypeByIdRequest.Validate if the designated constraints aren't met.
type UpdateNodeTypeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeTypeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeTypeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeTypeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeTypeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeTypeByIdRequestValidationError) ErrorName() string {
	return "UpdateNodeTypeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeTypeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeTypeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeTypeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeTypeByIdRequestValidationError{}

// Validate checks the field values on DeleteNodeTypeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNodeTypeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNodeTypeByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNodeTypeByIdRequestMultiError, or nil if none found.
func (m *DeleteNodeTypeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNodeTypeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteNodeTypeByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNodeTypeByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteNodeTypeByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNodeTypeByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteNodeTypeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNodeTypeByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNodeTypeByIdRequestMultiError) AllErrors() []error { return m }

// DeleteNodeTypeByIdRequestValidationError is the validation error returned by
// DeleteNodeTypeByIdRequest.Validate if the designated constraints aren't met.
type DeleteNodeTypeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeTypeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeTypeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeTypeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeTypeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeTypeByIdRequestValidationError) ErrorName() string {
	return "DeleteNodeTypeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeTypeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeTypeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeTypeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeTypeByIdRequestValidationError{}

// Validate checks the field values on CreateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodesRequestMultiError, or nil if none found.
func (m *CreateNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWarehouseId() < 1 {
		err := CreateNodesRequestValidationError{
			field:  "WarehouseId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStart(); val < 1 || val > 1000 {
		err := CreateNodesRequestValidationError{
			field:  "Start",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetEnd(); val < 1 || val > 1000 {
		err := CreateNodesRequestValidationError{
			field:  "End",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetAuxAix(); val < 1 || val > 1000 {
		err := CreateNodesRequestValidationError{
			field:  "AuxAix",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetNodeTupleType(); val < 1 || val > 2 {
		err := CreateNodesRequestValidationError{
			field:  "NodeTupleType",
			reason: "value must be inside range [1, 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateNodesRequestMultiError(errors)
	}

	return nil
}

// CreateNodesRequestMultiError is an error wrapping multiple validation errors
// returned by CreateNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodesRequestMultiError) AllErrors() []error { return m }

// CreateNodesRequestValidationError is the validation error returned by
// CreateNodesRequest.Validate if the designated constraints aren't met.
type CreateNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodesRequestValidationError) ErrorName() string {
	return "CreateNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodesRequestValidationError{}

// Validate checks the field values on GetNodeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeByIdRequestMultiError, or nil if none found.
func (m *GetNodeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetNodeByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNodeByIdRequestMultiError(errors)
	}

	return nil
}

// GetNodeByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetNodeByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNodeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeByIdRequestMultiError) AllErrors() []error { return m }

// GetNodeByIdRequestValidationError is the validation error returned by
// GetNodeByIdRequest.Validate if the designated constraints aren't met.
type GetNodeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeByIdRequestValidationError) ErrorName() string {
	return "GetNodeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeByIdRequestValidationError{}

// Validate checks the field values on GetNodesByWarehouseIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodesByWarehouseIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodesByWarehouseIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodesByWarehouseIdRequestMultiError, or nil if none found.
func (m *GetNodesByWarehouseIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodesByWarehouseIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWarehouseId() < 1 {
		err := GetNodesByWarehouseIdRequestValidationError{
			field:  "WarehouseId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNodesByWarehouseIdRequestMultiError(errors)
	}

	return nil
}

// GetNodesByWarehouseIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetNodesByWarehouseIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNodesByWarehouseIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodesByWarehouseIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodesByWarehouseIdRequestMultiError) AllErrors() []error { return m }

// GetNodesByWarehouseIdRequestValidationError is the validation error returned
// by GetNodesByWarehouseIdRequest.Validate if the designated constraints
// aren't met.
type GetNodesByWarehouseIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodesByWarehouseIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodesByWarehouseIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodesByWarehouseIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodesByWarehouseIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodesByWarehouseIdRequestValidationError) ErrorName() string {
	return "GetNodesByWarehouseIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodesByWarehouseIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodesByWarehouseIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodesByWarehouseIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodesByWarehouseIdRequestValidationError{}

// Validate checks the field values on GetNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeResponseMultiError, or nil if none found.
func (m *GetNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeResponseValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNodeResponseMultiError(errors)
	}

	return nil
}

// GetNodeResponseMultiError is an error wrapping multiple validation errors
// returned by GetNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeResponseMultiError) AllErrors() []error { return m }

// GetNodeResponseValidationError is the validation error returned by
// GetNodeResponse.Validate if the designated constraints aren't met.
type GetNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeResponseValidationError) ErrorName() string { return "GetNodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeResponseValidationError{}

// Validate checks the field values on GetNodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodesResponseMultiError, or nil if none found.
func (m *GetNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodesResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodesResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodesResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNodesResponseMultiError(errors)
	}

	return nil
}

// GetNodesResponseMultiError is an error wrapping multiple validation errors
// returned by GetNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodesResponseMultiError) AllErrors() []error { return m }

// GetNodesResponseValidationError is the validation error returned by
// GetNodesResponse.Validate if the designated constraints aren't met.
type GetNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodesResponseValidationError) ErrorName() string { return "GetNodesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodesResponseValidationError{}

// Validate checks the field values on Warehouse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Warehouse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Warehouse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WarehouseMultiError, or nil
// if none found.
func (m *Warehouse) ValidateAll() error {
	return m.validate(true)
}

func (m *Warehouse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsDefault

	// no validation rules for Status

	if len(errors) > 0 {
		return WarehouseMultiError(errors)
	}

	return nil
}

// WarehouseMultiError is an error wrapping multiple validation errors returned
// by Warehouse.ValidateAll() if the designated constraints aren't met.
type WarehouseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WarehouseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WarehouseMultiError) AllErrors() []error { return m }

// WarehouseValidationError is the validation error returned by
// Warehouse.Validate if the designated constraints aren't met.
type WarehouseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarehouseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarehouseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarehouseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarehouseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarehouseValidationError) ErrorName() string { return "WarehouseValidationError" }

// Error satisfies the builtin error interface
func (e WarehouseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarehouse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarehouseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarehouseValidationError{}

// Validate checks the field values on NodeType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeTypeMultiError, or nil
// if none found.
func (m *NodeType) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	if m.IsDefault != nil {
		// no validation rules for IsDefault
	}

	if len(errors) > 0 {
		return NodeTypeMultiError(errors)
	}

	return nil
}

// NodeTypeMultiError is an error wrapping multiple validation errors returned
// by NodeType.ValidateAll() if the designated constraints aren't met.
type NodeTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeTypeMultiError) AllErrors() []error { return m }

// NodeTypeValidationError is the validation error returned by
// NodeType.Validate if the designated constraints aren't met.
type NodeTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeTypeValidationError) ErrorName() string { return "NodeTypeValidationError" }

// Error satisfies the builtin error interface
func (e NodeTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeTypeValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WarehouseId

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

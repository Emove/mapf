syntax = "proto3";

package warehouse.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import public "common/data/v1/data.proto";
import public "common/v1/common.proto";

option go_package = "mapf/api/warehouse/v1;v1";

enum NodeTupleType {
  PLACEHOLDER_NODE_TUPLE_TYPE = 0;
  COLUMN = 1;
  ROW = 2;
}

// The warehouse service definition.
service WarehouseService {
  // -------------------------------------------------  Warehouse  -----------------------------------------------------
  rpc CreateWarehouse (CreateWarehouseRequest) returns (SimpleWarehouseResponse) {
    option (google.api.http) = {
      post: "/warehouse",
      body: "*",
    };
  }
  rpc GetWarehouseByName(GetWarehouseByNameRequest) returns (SimpleWarehouseResponse) {
    option (google.api.http) = {
      get: "/warehouse/name/{name}"
    };
  }
  rpc GetWarehouseById(GetWarehouseByIdRequest) returns (SimpleWarehouseResponse) {
    option (google.api.http) = {
      get: "/warehouse/{id}"
    };
  }
  rpc UpdateWarehouseById(UpdateWarehouseByIdRequest) returns (common.v1.SimpleResponse) {
    option (google.api.http) = {
      put: "/warehouse/{id}",
      body: "*",
    };
  }
  rpc UpdateWarehouseStatusById(UpdateWarehouseStatusByIdRequest) returns (common.v1.SimpleResponse) {
    option (google.api.http) = {
      put: "/warehouse/{id}/status",
      body: "*",
    };
  }
  rpc DeleteWarehouseById(DeleteWarehouseByIdRequest) returns (common.v1.SimpleResponse) {
    option (google.api.http) = {
      delete: "/warehouse/{id}"
    };
  }
  // -------------------------------------------------  NodeType  ------------------------------------------------------
  rpc CreateNodeType(CreateNodeTypeRequest) returns (SimpleNodeTypeResponse) {
    option (google.api.http) = {
      post: "/node_type",
      body: "*",
    };
  }
  rpc GetNodeTypeById(GetNodeTypeByIdRequest) returns (SimpleNodeTypeResponse) {
    option (google.api.http) = {
      get: "/node_type/{id}",
    };
  }
  rpc UpdateNodeTypeById(UpdateNodeTypeByIdRequest) returns (common.v1.SimpleResponse) {
    option (google.api.http) = {
      put: "/node_type/{id}",
      body: "*",
    };
  }
  rpc DeleteNodeTypeById(DeleteNodeTypeByIdRequest) returns (common.v1.SimpleResponse) {
    option (google.api.http) = {
      delete: "/node_type/{id}"
    };
  }
  // -------------------------------------------------  Node  ----------------------------------------------------------
  rpc CreateNodes(CreateNodesRequest) returns (common.v1.SimpleResponse) {
    option (google.api.http) = {
      post: "/node",
      body: "*"
    };
  }
  rpc GetNodeById(GetNodeByIdRequest) returns (GetNodeResponse) {
    option (google.api.http) = {
      get: "/node/{id}",
    };
  }
  rpc GetNodesByWarehouseId(GetNodesByWarehouseIdRequest) returns (GetNodesResponse) {
    option (google.api.http) = {
      get: "/warehouse/{warehouse_id}/nodes"
    };
  }
  // -------------------------------------------------  NodeConfigItem  ------------------------------------------------
  rpc CreateNodeConfigItem(CreateNodeConfigItemRequest) returns (SimpleNodeConfigItemResponse) {
    option (google.api.http) = {
      post: "/node_config_item",
      body: "*"
    };
  }
  rpc GetNodeConfigItemById(GetNodeConfigItemByIdRequest) returns (SimpleNodeConfigItemResponse) {
    option (google.api.http) = {
      get: "/node_config_item/{id}",
    };
  }
  rpc SelectNodeConfigItems(SelectNodeConfigItemRequest) returns (SelectNodeConfigItemResponse) {
    option (google.api.http) = {
      get: "/node_config_items",
    };
  }
  rpc UpdateNodeConfigItem(UpdateNodeConfigItemRequest) returns (common.v1.SimpleResponse){
    option (google.api.http) = {
      put: "/node_config_item/{id}"
      body: "*"
    };
  }

}

message CreateWarehouseRequest {
  string name = 1 [(validate.rules).string = {min_len: 3, max_len: 64}];
}

message SimpleWarehouseResponse {
  Warehouse warehouse = 1;
}

message GetWarehouseByNameRequest {
  string name = 1 [(validate.rules).string = {min_len: 3, max_len: 64}];
}

message GetWarehouseByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
}

message GetWarehouseResponse {
  Warehouse warehouse = 1;
}

message UpdateWarehouseByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
  string name = 2 [(validate.rules).string = {ignore_empty: true, min_len: 3, max_len: 64}];
  uint32 is_default = 3 [(validate.rules).uint32 = {gte: 0, lte: 2}];
}

message UpdateWarehouseStatusByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
  uint32 status = 2 [(validate.rules).uint32 = {gte: 0, lte: 2}];
}

message DeleteWarehouseByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
}

message CreateNodeTypeRequest {
  string code = 1  [(validate.rules).string = {min_len: 3, max_len: 64}];
  string name = 2  [(validate.rules).string = {min_len: 3, max_len: 64}];
}

message SimpleNodeTypeResponse {
  NodeType node_type = 1;
}

message GetNodeTypeByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
}

message GetNodeTypeResponse {
  NodeType node_type = 1;
}

message UpdateNodeTypeByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
  optional string code = 2  [(validate.rules).string = {min_len: 3, max_len: 64}];
  optional string name = 3  [(validate.rules).string = {min_len: 3, max_len: 64}];
  optional uint32 is_default = 4 [(validate.rules).uint32 = {gte: 0, lte: 2}];
}

message DeleteNodeTypeByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
}

message CreateNodesRequest {
  uint32 warehouse_id = 1 [(validate.rules).uint32 = {gte:1}];
  uint32 start = 2 [(validate.rules).uint32 = {gte: 1, lte: 1000}];
  uint32 end = 3 [(validate.rules).uint32 = {gte: 1, lte: 1000}];
  uint32 aux_aix = 4 [(validate.rules).uint32 = {gte: 1, lte: 1000}];
  uint32 node_tuple_type = 5 [(validate.rules).uint32 = {gte: 1, lte: 2}];
}

message GetNodeByIdRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte: 1}];
}

message GetNodesByWarehouseIdRequest {
  uint32 warehouse_id = 1 [(validate.rules).uint32 = {gte: 1}];
  common.v1.Page page = 2;
}

message GetNodeResponse {
  Node node = 1;
}

message GetNodesResponse {
  repeated Node nodes = 1;
  common.v1.Page page = 2;
}

message CreateNodeConfigItemRequest {
  uint32 warehouse_id = 1 [(validate.rules).uint32 = {gte:1}];
  uint32 node_type_id = 2 [(validate.rules).uint32 = {gte:1}];
  string code = 3 [(validate.rules).string = {min_len:3, max_len: 63}];
  string name = 4 [(validate.rules).string = {min_len:3, max_len: 63}];
  string value_type = 5 [(validate.rules).string = {min_len:3, max_len: 31}];
  string default_value = 6 [(validate.rules).string = {min_len:1, max_len: 63}];
  repeated string optional_values = 7 [(validate.rules).repeated = {ignore_empty: true, items: {string: {min_len: 1, max_len: 63}}}];
}

message SimpleNodeConfigItemResponse {
  NodeConfigItem item = 1;
}

message GetNodeConfigItemByIdRequest {
  uint32 id = 1;
}

message SelectNodeConfigItemRequest {
  uint32 warehouse_id = 2;
  optional uint32 node_type_id = 3;
  optional string code = 4;
  optional string name = 5;
  optional string value_type = 6;
  optional common.data.v1.EnableStatus status = 7;
  optional common.v1.Page page = 8;
}

message SelectNodeConfigItemResponse {
  repeated NodeConfigItem items = 1;
  optional common.v1.Page page = 2;
}

message UpdateNodeConfigItemRequest {
  uint32 id = 1 [(validate.rules).uint32 = {gte:1}];
  optional string code = 2 [(validate.rules).string = {ignore_empty: true, min_len:3, max_len: 63}];
  optional string name = 3 [(validate.rules).string = {ignore_empty: true, min_len:3, max_len: 63}];
  optional string value_type = 4 [(validate.rules).string = {ignore_empty: true, min_len:3, max_len: 31}];
  optional string default_value = 5 [(validate.rules).string = {ignore_empty: true, min_len:1, max_len: 63}];
  repeated string optional_values = 6 [(validate.rules).repeated = {ignore_empty: true, items: {string: {min_len: 1, max_len: 63}}}];
}

message Warehouse {
  uint32 id = 1;
  string name = 2;
  common.data.v1.DefaultStatus is_default = 3;
  common.data.v1.EnableStatus status = 4;
}

message NodeType {
  uint32 id = 1;
  string code = 3;
  string name = 4;
  optional common.data.v1.DefaultStatus is_default = 5;
}

message Node {
  uint32 id = 1;
  uint32 warehouse_id = 2;
  uint32 x = 3;
  uint32 y = 4;
}

message NodeConfigItem {
  uint32 id = 1;
  uint32 warehouse_id = 2;
  uint32 node_type_id = 3;
  string code = 4;
  string name = 5;
  string value_type = 6;
  string default_value = 7;
  repeated string optional_values = 8;
  common.data.v1.EnableStatus status = 9;
}
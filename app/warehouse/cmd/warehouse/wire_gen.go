// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"mapf/app/warehouse/internal/biz"
	"mapf/app/warehouse/internal/conf"
	"mapf/app/warehouse/internal/data"
	"mapf/app/warehouse/internal/server"
	"mapf/app/warehouse/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	transaction := data.NewTransaction(dataData)
	warehouseRepo, err := data.NewWarehouseRepo(dataData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	warehouseUsecase := biz.NewWarehouseUsecase(transaction, warehouseRepo, logger)
	nodeTypeRepo, err := data.NewNodeTypeRepo(dataData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	nodeTypeUsecase := biz.NewNodeTypeUsecase(transaction, nodeTypeRepo, logger)
	nodeRepo, err := data.NewNodeRepo(dataData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configuration, cleanup2, err := data.NewEventCenterConfiguration(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	nodeUsecase, err := biz.NewNodeUsecase(transaction, nodeRepo, warehouseRepo, configuration, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	nodeConfigItemRepo, err := data.NewNodeConfigItemRepo(dataData, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	nodeConfigItemUsecase := biz.NewNodeConfigItemUsecase(transaction, nodeConfigItemRepo, warehouseRepo, nodeTypeRepo, logger)
	affixNodeRepo, err := data.NewAffixNodeRepo(dataData, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	affixNodeUsecase, err := biz.NewAffixNodeUsecase(transaction, affixNodeRepo, warehouseRepo, nodeRepo, nodeTypeRepo, configuration, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	warehouseService := service.NewWarehouseService(warehouseUsecase, nodeTypeUsecase, nodeUsecase, nodeConfigItemUsecase, affixNodeUsecase)
	grpcServer := server.NewGRPCServer(confServer, warehouseService, logger)
	httpServer := server.NewHTTPServer(confServer, warehouseService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
